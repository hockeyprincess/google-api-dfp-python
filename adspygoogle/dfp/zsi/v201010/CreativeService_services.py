################################################## 
# CreativeService_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from CreativeService_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI

# Locator
class CreativeServiceLocator:
    CreativeServiceInterface_address = "https://www.google.com:443/apis/ads/publisher/v201010/CreativeService"
    def getCreativeServiceInterfaceAddress(self):
        return CreativeServiceLocator.CreativeServiceInterface_address
    def getCreativeServiceInterface(self, url=None, **kw):
        return CreativeServiceSoapBindingSOAP(url or CreativeServiceLocator.CreativeServiceInterface_address, **kw)

# Methods
class CreativeServiceSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: createCreative
    def createCreative(self, request):
        if isinstance(request, createCreativeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createCreativeResponse.typecode)
        return response

    # op: createCreatives
    def createCreatives(self, request):
        if isinstance(request, createCreativesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createCreativesResponse.typecode)
        return response

    # get: getCreative
    def getCreative(self, request):
        if isinstance(request, getCreativeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getCreativeResponse.typecode)
        return response

    # get: getCreativesByStatement
    def getCreativesByStatement(self, request):
        if isinstance(request, getCreativesByStatementRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getCreativesByStatementResponse.typecode)
        return response

    # op: updateCreative
    def updateCreative(self, request):
        if isinstance(request, updateCreativeRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(updateCreativeResponse.typecode)
        return response

    # op: updateCreatives
    def updateCreatives(self, request):
        if isinstance(request, updateCreativesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(updateCreativesResponse.typecode)
        return response

createCreativeRequest = ns0.createCreative_Dec().pyclass

createCreativeResponse = ns0.createCreativeResponse_Dec().pyclass

createCreativesRequest = ns0.createCreatives_Dec().pyclass

createCreativesResponse = ns0.createCreativesResponse_Dec().pyclass

getCreativeRequest = ns0.getCreative_Dec().pyclass

getCreativeResponse = ns0.getCreativeResponse_Dec().pyclass

getCreativesByStatementRequest = ns0.getCreativesByStatement_Dec().pyclass

getCreativesByStatementResponse = ns0.getCreativesByStatementResponse_Dec().pyclass

updateCreativeRequest = ns0.updateCreative_Dec().pyclass

updateCreativeResponse = ns0.updateCreativeResponse_Dec().pyclass

updateCreativesRequest = ns0.updateCreatives_Dec().pyclass

updateCreativesResponse = ns0.updateCreativesResponse_Dec().pyclass
