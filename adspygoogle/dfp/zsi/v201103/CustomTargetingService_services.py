################################################## 
# CustomTargetingService_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from CustomTargetingService_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI

# Locator
class CustomTargetingServiceLocator:
    CustomTargetingServiceInterface_address = "https://www.google.com:443/apis/ads/publisher/v201103/CustomTargetingService"
    def getCustomTargetingServiceInterfaceAddress(self):
        return CustomTargetingServiceLocator.CustomTargetingServiceInterface_address
    def getCustomTargetingServiceInterface(self, url=None, **kw):
        return CustomTargetingServiceSoapBindingSOAP(url or CustomTargetingServiceLocator.CustomTargetingServiceInterface_address, **kw)

# Methods
class CustomTargetingServiceSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: createCustomTargetingKeys
    def createCustomTargetingKeys(self, request):
        if isinstance(request, createCustomTargetingKeysRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createCustomTargetingKeysResponse.typecode)
        return response

    # op: createCustomTargetingValues
    def createCustomTargetingValues(self, request):
        if isinstance(request, createCustomTargetingValuesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(createCustomTargetingValuesResponse.typecode)
        return response

    # get: getCustomTargetingKeysByStatement
    def getCustomTargetingKeysByStatement(self, request):
        if isinstance(request, getCustomTargetingKeysByStatementRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getCustomTargetingKeysByStatementResponse.typecode)
        return response

    # get: getCustomTargetingValuesByStatement
    def getCustomTargetingValuesByStatement(self, request):
        if isinstance(request, getCustomTargetingValuesByStatementRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getCustomTargetingValuesByStatementResponse.typecode)
        return response

    # op: performCustomTargetingKeyAction
    def performCustomTargetingKeyAction(self, request):
        if isinstance(request, performCustomTargetingKeyActionRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(performCustomTargetingKeyActionResponse.typecode)
        return response

    # op: performCustomTargetingValueAction
    def performCustomTargetingValueAction(self, request):
        if isinstance(request, performCustomTargetingValueActionRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(performCustomTargetingValueActionResponse.typecode)
        return response

    # op: updateCustomTargetingKeys
    def updateCustomTargetingKeys(self, request):
        if isinstance(request, updateCustomTargetingKeysRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(updateCustomTargetingKeysResponse.typecode)
        return response

    # op: updateCustomTargetingValues
    def updateCustomTargetingValues(self, request):
        if isinstance(request, updateCustomTargetingValuesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(updateCustomTargetingValuesResponse.typecode)
        return response

createCustomTargetingKeysRequest = ns0.createCustomTargetingKeys_Dec().pyclass

createCustomTargetingKeysResponse = ns0.createCustomTargetingKeysResponse_Dec().pyclass

createCustomTargetingValuesRequest = ns0.createCustomTargetingValues_Dec().pyclass

createCustomTargetingValuesResponse = ns0.createCustomTargetingValuesResponse_Dec().pyclass

getCustomTargetingKeysByStatementRequest = ns0.getCustomTargetingKeysByStatement_Dec().pyclass

getCustomTargetingKeysByStatementResponse = ns0.getCustomTargetingKeysByStatementResponse_Dec().pyclass

getCustomTargetingValuesByStatementRequest = ns0.getCustomTargetingValuesByStatement_Dec().pyclass

getCustomTargetingValuesByStatementResponse = ns0.getCustomTargetingValuesByStatementResponse_Dec().pyclass

performCustomTargetingKeyActionRequest = ns0.performCustomTargetingKeyAction_Dec().pyclass

performCustomTargetingKeyActionResponse = ns0.performCustomTargetingKeyActionResponse_Dec().pyclass

performCustomTargetingValueActionRequest = ns0.performCustomTargetingValueAction_Dec().pyclass

performCustomTargetingValueActionResponse = ns0.performCustomTargetingValueActionResponse_Dec().pyclass

updateCustomTargetingKeysRequest = ns0.updateCustomTargetingKeys_Dec().pyclass

updateCustomTargetingKeysResponse = ns0.updateCustomTargetingKeysResponse_Dec().pyclass

updateCustomTargetingValuesRequest = ns0.updateCustomTargetingValues_Dec().pyclass

updateCustomTargetingValuesResponse = ns0.updateCustomTargetingValuesResponse_Dec().pyclass
