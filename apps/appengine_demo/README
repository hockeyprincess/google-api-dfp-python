
Google's DoubleClick for Publishers API on App Engine (Python)
==============================================================

Google's DoubleClick for Publishers API service lets developers design computer
programs that interact directly with the DFP platform. With these applications,
advertisers and third parties can more efficiently -- and creatively -- manage
their large or complex DFP accounts.

App Engine offers a complete development stack that uses familiar technologies
to build and host web applications.

In order for web application to communicate with DFP API, we will use DFP API
Python Client Library from http://code.google.com/p/google-api-dfp-python/. The
transport of the SOAP messages can be handled by either a SOAPpy or ZSI, which
are two well known web services toolkits from http://pywebsvcs.sourceforge.net/.

Since both Python modules, SOAPpy and ZSI, are not natively supported by the
App Engine, we will use patched versions of these toolkits. The patches are
responsible for identifying whether App Engine is being used and change
accordingly the way toolkits handle SOAP messages. In addition, we will use a
patched version of PyXML.

In this demo, we access a given Sandbox account using DFP API and help with
managing an inventory.


What's included with this demo?
-------------------------------

1) A patched version of SOAPpy toolkit in "dfpapi_demo/lib/SOAPpy/"
   directory. For your reference, the patch itself is available at
   "dfpapi_demo/patches/appengine_soappy_0.12.0.patch".

2) A patched version of ZSI toolkit in "dfpapi_demo/lib/ZSI/" directory. For
   your reference, the patch itself is available at
  "dfpapi_demo/patches/appengine_zsi_2.0.0.patch".

3) A patched version of PyXML in "dfpapi_demo/lib/_xmlplus" directory,
   required by SOAP toolkit. For your reference, the patch itself is available
   at "dfpapi_demo/patches/appengine_pyxml_0.8.4.patch".

4) The ElementTree module in "dfpapi_demo/lib/elementtree" directory,
   optional for XML parsing (by default PyXML is used to parse XML messages).

5) The fpconst module in "dfpapi_demo/lib/" directory, required by SOAPpy
   toolkit.

6) The DFP API Python client library in "dfpapi_demo/lib/adspygoogle", required
   by this demo.

7) Symbolic links in "dfpapi_demo/" to each of the modules in
   "dfpapi_demo/lib/". This is to make sure that App Engine uses
   local/patched versions of these modules, in case the module is already
   installed on the system.

8) And the demo application itself.


Step-by-step guide for using DFP API demo on App Engine:
--------------------------------------------------------

1) Make sure you have Python v2.5 or above, which is required by App Engine and
   can be fetched from http://www.python.org/.

2) If you don't have one already, sign up for a Google Account at
   https://www.google.com/accounts/NewAccount. This account will be used to
   access your DFP API Sandbox.

3) Download the latest version of App Engine SDK at
   http://code.google.com/appengine/downloads.html and unpack its content. This
   demo was tested with version 1.3.8.

4) Place this demo application into App Engine's "google_appengine/" directory,
   which you should have from previous step (3). The location of your demo
   application should now be something like,
   "google_appengine/dfpapi_demo/".

5) Edit "dfpapi_demo/api_client.py" (lines 44-45) to set your Google
   Account's login email and password.

6) If you would like to use this demo to access your production DFP account,
   make the following changes,

   a) Update "dfpapi_demo/api_client.py" (lines 44-45) to set email and
      password to your DFP account's credentials.

   b) Update "dfpapi_demo/api_worker.py" (line 39) to set production server,

      SERVER = 'https://www.google.com'

7) Navigate into "google_appengine/" directory and start the web server with the
   following command, giving it the path to the demo application directory
   (the --clear_datastore option can be used to clear the datastore),

   $ ./dev_appserver.py dfpapi_demo/

   The web server is now running, listening for requests on port 8080. Access
   the demo application by visiting http://localhost:8080/ in your web browser.
   The development console is accessed via http://localhost:8080/_ah/admin.

   NOTE: If you see "dfpapi_demo/_xmlplus/parsers/pyexpat.so: invalid ELF
   header" error, this means that you may need to locally build PyXML module and
   copy over newly built "_xmlplus/parsers/pyexpat.so" file into
   "google_appengine/dfpapi_demo/lib/_xmlplus/parsers/" directory. In order
   to build this file,

   a) Fetch and uncompress the latest copy (v0.8.4) of PyXML from
      http://sourceforge.net/projects/pyxml/.

   b) Run the following command to build the library,

      $ python setup.py build

   c) Copy "PyXML-0.8.4/build/lib.{OS_VERSION}/_xmlplus/parsers/pyexpat.so" file
      into "google_appengine/dfpapi_demo/lib/_xmlplus/parsers/" directory.


Where do I submit bug reports and/or feature requests?
---------------------------------------------------

Use issue tracker at http://code.google.com/p/google-api-dfp-python/issues/list.


External Dependencies:
----------------------

    - Python v2.5+           -- http://www.python.org/
    - App Engine SDK v1.2.2+ -- http://code.google.com/appengine/
    - Google's DoubleClick for Publishers API Python Client Library v4.1.0+
                             -- http://code.google.com/p/google-api-dfp-python/
    - PyXML v0.8.3+          -- http://sourceforge.net/projects/pyxml/
                             or
      ElementTree v1.2.6+    -- http://effbot.org/zone/element-index.htm
                             or
      lxml v2.2+             -- http://codespeak.net/lxml/index.html
    - SOAPpy v0.12.0         -- http://pywebsvcs.sourceforge.net/
                             or
      ZSI v2.0               -- http://pywebsvcs.sourceforge.net/
    - Google Account         -- https://www.google.com/accounts/NewAccount


Author:
    api.sgrinberg@gmail.com (Stan Grinberg)
