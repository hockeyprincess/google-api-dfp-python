################################################## 
# OrderService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://www.google.com/apis/ads/publisher/v201004
##############################

class ns0:
    targetNamespace = "https://www.google.com/apis/ads/publisher/v201004"

    class ApproveOrders_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "ApproveOrders")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApproveOrders_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OrderAction_Def not in ns0.ApproveOrders_Def.__bases__:
                bases = list(ns0.ApproveOrders_Def.__bases__)
                bases.insert(0, ns0.OrderAction_Def)
                ns0.ApproveOrders_Def.__bases__ = tuple(bases)

            ns0.OrderAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArchiveOrders_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "ArchiveOrders")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ArchiveOrders_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OrderAction_Def not in ns0.ArchiveOrders_Def.__bases__:
                bases = list(ns0.ArchiveOrders_Def.__bases__)
                bases.insert(0, ns0.OrderAction_Def)
                ns0.ArchiveOrders_Def.__bases__ = tuple(bases)

            ns0.OrderAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AuthenticationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "AuthenticationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthenticationError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","AuthenticationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthenticationError_Def.__bases__:
                bases = list(ns0.AuthenticationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthenticationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CommonError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "CommonError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CommonError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","CommonError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.CommonError_Def.__bases__:
                bases = list(ns0.CommonError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.CommonError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Date_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "Date")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Date_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"year"), aname="_year", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"month"), aname="_month", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"day"), aname="_day", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._year = None
                    self._month = None
                    self._day = None
                    return
            Holder.__name__ = "Date_Holder"
            self.pyclass = Holder

    class DateTime_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "DateTime")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DateTime_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Date",lazy=False)(pname=(ns,"date"), aname="_date", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"hour"), aname="_hour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minute"), aname="_minute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"second"), aname="_second", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"timeZoneID"), aname="_timeZoneID", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._date = None
                    self._hour = None
                    self._minute = None
                    self._second = None
                    self._timeZoneID = None
                    return
            Holder.__name__ = "DateTime_Holder"
            self.pyclass = Holder

    class DisapproveOrders_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "DisapproveOrders")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DisapproveOrders_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OrderAction_Def not in ns0.DisapproveOrders_Def.__bases__:
                bases = list(ns0.DisapproveOrders_Def.__bases__)
                bases.insert(0, ns0.OrderAction_Def)
                ns0.DisapproveOrders_Def.__bases__ = tuple(bases)

            ns0.OrderAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DoubleParam_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "DoubleParam")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DoubleParam_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Param_Def not in ns0.DoubleParam_Def.__bases__:
                bases = list(ns0.DoubleParam_Def.__bases__)
                bases.insert(0, ns0.Param_Def)
                ns0.DoubleParam_Def.__bases__ = tuple(bases)

            ns0.Param_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InternalApiError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "InternalApiError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InternalApiError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","InternalApiError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InternalApiError_Def.__bases__:
                bases = list(ns0.InternalApiError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InternalApiError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InvalidEmailError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "InvalidEmailError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InvalidEmailError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","InvalidEmailError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InvalidEmailError_Def.__bases__:
                bases = list(ns0.InvalidEmailError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InvalidEmailError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LongParam_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "LongParam")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LongParam_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Param_Def not in ns0.LongParam_Def.__bases__:
                bases = list(ns0.LongParam_Def.__bases__)
                bases.insert(0, ns0.Param_Def)
                ns0.LongParam_Def.__bases__ = tuple(bases)

            ns0.Param_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Money_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "Money")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Money_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"currencyCode"), aname="_currencyCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"microAmount"), aname="_microAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._currencyCode = None
                    self._microAmount = None
                    return
            Holder.__name__ = "Money_Holder"
            self.pyclass = Holder

    class NotNullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "NotNullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotNullError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","NotNullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotNullError_Def.__bases__:
                bases = list(ns0.NotNullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotNullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OrderActionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "OrderActionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OrderActionError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","OrderActionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.OrderActionError_Def.__bases__:
                bases = list(ns0.OrderActionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.OrderActionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class OrderError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "OrderError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.OrderError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","OrderError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.OrderError_Def.__bases__:
                bases = list(ns0.OrderError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.OrderError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ParseError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "ParseError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ParseError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","ParseError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ParseError_Def.__bases__:
                bases = list(ns0.ParseError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ParseError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PauseOrders_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "PauseOrders")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PauseOrders_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OrderAction_Def not in ns0.PauseOrders_Def.__bases__:
                bases = list(ns0.PauseOrders_Def.__bases__)
                bases.insert(0, ns0.OrderAction_Def)
                ns0.PauseOrders_Def.__bases__ = tuple(bases)

            ns0.OrderAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PermissionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "PermissionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PermissionError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","PermissionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.PermissionError_Def.__bases__:
                bases = list(ns0.PermissionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.PermissionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "QuotaError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","QuotaError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaError_Def.__bases__:
                bases = list(ns0.QuotaError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RangeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "RangeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RangeError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","RangeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RangeError_Def.__bases__:
                bases = list(ns0.RangeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RangeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "RequiredError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","RequiredError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredError_Def.__bases__:
                bases = list(ns0.RequiredError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ResumeOrders_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "ResumeOrders")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ResumeOrders_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OrderAction_Def not in ns0.ResumeOrders_Def.__bases__:
                bases = list(ns0.ResumeOrders_Def.__bases__)
                bases.insert(0, ns0.OrderAction_Def)
                ns0.ResumeOrders_Def.__bases__ = tuple(bases)

            ns0.OrderAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RetractOrders_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "RetractOrders")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RetractOrders_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OrderAction_Def not in ns0.RetractOrders_Def.__bases__:
                bases = list(ns0.RetractOrders_Def.__bases__)
                bases.insert(0, ns0.OrderAction_Def)
                ns0.RetractOrders_Def.__bases__ = tuple(bases)

            ns0.OrderAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ServerError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "ServerError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ServerError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","ServerError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ServerError_Def.__bases__:
                bases = list(ns0.ServerError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ServerError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SoapRequestHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "SoapRequestHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapRequestHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"networkCode"), aname="_networkCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"applicationName"), aname="_applicationName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"oAuthToken"), aname="_oAuthToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authToken = None
                    self._networkCode = None
                    self._applicationName = None
                    self._oAuthToken = None
                    return
            Holder.__name__ = "SoapRequestHeader_Holder"
            self.pyclass = Holder

    class SoapResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "SoapResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapResponseHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requestId"), aname="_requestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseTime"), aname="_responseTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._responseTime = None
                    return
            Holder.__name__ = "SoapResponseHeader_Holder"
            self.pyclass = Holder

    class StatementError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "StatementError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StatementError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","StatementError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StatementError_Def.__bases__:
                bases = list(ns0.StatementError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StatementError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class StringParam_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "StringParam")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StringParam_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Param_Def not in ns0.StringParam_Def.__bases__:
                bases = list(ns0.StringParam_Def.__bases__)
                bases.insert(0, ns0.Param_Def)
                ns0.StringParam_Def.__bases__ = tuple(bases)

            ns0.Param_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SubmitOrdersForApproval_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "SubmitOrdersForApproval")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.SubmitOrdersForApproval_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OrderAction_Def not in ns0.SubmitOrdersForApproval_Def.__bases__:
                bases = list(ns0.SubmitOrdersForApproval_Def.__bases__)
                bases.insert(0, ns0.OrderAction_Def)
                ns0.SubmitOrdersForApproval_Def.__bases__ = tuple(bases)

            ns0.OrderAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TypeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "TypeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TypeError_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.TypeError_Def.__bases__:
                bases = list(ns0.TypeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.TypeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UnarchiveOrders_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "UnarchiveOrders")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.UnarchiveOrders_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.OrderAction_Def not in ns0.UnarchiveOrders_Def.__bases__:
                bases = list(ns0.UnarchiveOrders_Def.__bases__)
                bases.insert(0, ns0.OrderAction_Def)
                ns0.UnarchiveOrders_Def.__bases__ = tuple(bases)

            ns0.OrderAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UniqueError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "UniqueError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.UniqueError_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.UniqueError_Def.__bases__:
                bases = list(ns0.UniqueError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.UniqueError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UpdateResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "UpdateResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.UpdateResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"numChanges"), aname="_numChanges", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numChanges = None
                    return
            Holder.__name__ = "UpdateResult_Holder"
            self.pyclass = Holder

    class OrderAction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "OrderAction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OrderAction_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"OrderAction.Type"), aname="_OrderAction_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OrderAction_Type = None
                    return
            Holder.__name__ = "OrderAction_Holder"
            self.pyclass = Holder

    class Order_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "Order")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Order_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201004","DateTime",lazy=False)(pname=(ns,"startDateTime"), aname="_startDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201004","DateTime",lazy=False)(pname=(ns,"endDateTime"), aname="_endDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"unlimitedEndDateTime"), aname="_unlimitedEndDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201004","OrderStatus",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isArchived"), aname="_isArchived", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"notes"), aname="_notes", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"externalId"), aname="_externalId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"currencyCode"), aname="_currencyCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"advertiserId"), aname="_advertiserId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"creatorId"), aname="_creatorId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"traffickerId"), aname="_traffickerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"salespersonId"), aname="_salespersonId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"totalImpressionsDelivered"), aname="_totalImpressionsDelivered", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"totalClicksDelivered"), aname="_totalClicksDelivered", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201004","Money",lazy=False)(pname=(ns,"totalBudget"), aname="_totalBudget", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._name = None
                    self._startDateTime = None
                    self._endDateTime = None
                    self._unlimitedEndDateTime = None
                    self._status = None
                    self._isArchived = None
                    self._notes = None
                    self._externalId = None
                    self._currencyCode = None
                    self._advertiserId = None
                    self._creatorId = None
                    self._traffickerId = None
                    self._salespersonId = None
                    self._totalImpressionsDelivered = None
                    self._totalClicksDelivered = None
                    self._totalBudget = None
                    return
            Holder.__name__ = "Order_Holder"
            self.pyclass = Holder

    class OrderPage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "OrderPage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.OrderPage_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"totalResultSetSize"), aname="_totalResultSetSize", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startIndex"), aname="_startIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201004","Order",lazy=False)(pname=(ns,"results"), aname="_results", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._totalResultSetSize = None
                    self._startIndex = None
                    self._results = []
                    return
            Holder.__name__ = "OrderPage_Holder"
            self.pyclass = Holder

    class Param_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "Param")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Param_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Param.Type"), aname="_Param_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Param_Type = None
                    return
            Holder.__name__ = "Param_Holder"
            self.pyclass = Holder

    class String_ParamMapEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "String_ParamMapEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.String_ParamMapEntry_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201004","Param",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "String_ParamMapEntry_Holder"
            self.pyclass = Holder

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldPath"), aname="_fieldPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorString"), aname="_errorString", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApiError.Type"), aname="_ApiError_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldPath = None
                    self._trigger = None
                    self._errorString = None
                    self._ApiError_Type = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApplicationException_Def not in ns0.ApiException_Def.__bases__:
                bases = list(ns0.ApiException_Def.__bases__)
                bases.insert(0, ns0.ApplicationException_Def)
                ns0.ApiException_Def.__bases__ = tuple(bases)

            ns0.ApplicationException_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApplicationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "ApplicationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApplicationException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationException.Type"), aname="_ApplicationException_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._ApplicationException_Type = None
                    return
            Holder.__name__ = "ApplicationException_Holder"
            self.pyclass = Holder

    class Statement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "Statement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Statement_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"query"), aname="_query", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201004","String_ParamMapEntry",lazy=False)(pname=(ns,"params"), aname="_params", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._query = None
                    self._params = []
                    return
            Holder.__name__ = "Statement_Holder"
            self.pyclass = Holder

    class AuthenticationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "AuthenticationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CommonError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "CommonError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InternalApiError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "InternalApiError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InvalidEmailError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "InvalidEmailError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotNullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "NotNullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OrderActionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "OrderActionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OrderError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "OrderError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class OrderStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "OrderStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ParseError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "ParseError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PermissionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "PermissionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "QuotaError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RangeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "RangeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "RequiredError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ServerError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "ServerError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StatementError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        type = (schema, "StatementError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class createOrder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createOrder"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.createOrder_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Order",lazy=False)(pname=(ns,"order"), aname="_order", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","createOrder")
            kw["aname"] = "_createOrder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._order = None
                    return
            Holder.__name__ = "createOrder_Holder"
            self.pyclass = Holder

    class createOrderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createOrderResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.createOrderResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Order",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","createOrderResponse")
            kw["aname"] = "_createOrderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "createOrderResponse_Holder"
            self.pyclass = Holder

    class ApiExceptionFault_Dec(ElementDeclaration):
        literal = "ApiExceptionFault"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","ApiExceptionFault")
            kw["aname"] = "_ApiExceptionFault"
            if ns0.ApiException_Def not in ns0.ApiExceptionFault_Dec.__bases__:
                bases = list(ns0.ApiExceptionFault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.ApiExceptionFault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ApiExceptionFault_Dec_Holder"

    class createOrders_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createOrders"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.createOrders_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Order",lazy=False)(pname=(ns,"orders"), aname="_orders", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","createOrders")
            kw["aname"] = "_createOrders"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orders = []
                    return
            Holder.__name__ = "createOrders_Holder"
            self.pyclass = Holder

    class createOrdersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createOrdersResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.createOrdersResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Order",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","createOrdersResponse")
            kw["aname"] = "_createOrdersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = []
                    return
            Holder.__name__ = "createOrdersResponse_Holder"
            self.pyclass = Holder

    class getOrder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOrder"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.getOrder_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"orderId"), aname="_orderId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","getOrder")
            kw["aname"] = "_getOrder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderId = None
                    return
            Holder.__name__ = "getOrder_Holder"
            self.pyclass = Holder

    class getOrderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOrderResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.getOrderResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Order",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","getOrderResponse")
            kw["aname"] = "_getOrderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getOrderResponse_Holder"
            self.pyclass = Holder

    class getOrdersByStatement_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOrdersByStatement"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.getOrdersByStatement_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Statement",lazy=False)(pname=(ns,"filterStatement"), aname="_filterStatement", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","getOrdersByStatement")
            kw["aname"] = "_getOrdersByStatement"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filterStatement = None
                    return
            Holder.__name__ = "getOrdersByStatement_Holder"
            self.pyclass = Holder

    class getOrdersByStatementResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOrdersByStatementResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.getOrdersByStatementResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","OrderPage",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","getOrdersByStatementResponse")
            kw["aname"] = "_getOrdersByStatementResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getOrdersByStatementResponse_Holder"
            self.pyclass = Holder

    class performOrderAction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "performOrderAction"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.performOrderAction_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","OrderAction",lazy=False)(pname=(ns,"orderAction"), aname="_orderAction", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201004","Statement",lazy=False)(pname=(ns,"filterStatement"), aname="_filterStatement", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","performOrderAction")
            kw["aname"] = "_performOrderAction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orderAction = None
                    self._filterStatement = None
                    return
            Holder.__name__ = "performOrderAction_Holder"
            self.pyclass = Holder

    class performOrderActionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "performOrderActionResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.performOrderActionResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","UpdateResult",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","performOrderActionResponse")
            kw["aname"] = "_performOrderActionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "performOrderActionResponse_Holder"
            self.pyclass = Holder

    class updateOrder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateOrder"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.updateOrder_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Order",lazy=False)(pname=(ns,"order"), aname="_order", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","updateOrder")
            kw["aname"] = "_updateOrder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._order = None
                    return
            Holder.__name__ = "updateOrder_Holder"
            self.pyclass = Holder

    class updateOrderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateOrderResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.updateOrderResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Order",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","updateOrderResponse")
            kw["aname"] = "_updateOrderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "updateOrderResponse_Holder"
            self.pyclass = Holder

    class updateOrders_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateOrders"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.updateOrders_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Order",lazy=False)(pname=(ns,"orders"), aname="_orders", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","updateOrders")
            kw["aname"] = "_updateOrders"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._orders = []
                    return
            Holder.__name__ = "updateOrders_Holder"
            self.pyclass = Holder

    class updateOrdersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateOrdersResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            ns = ns0.updateOrdersResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201004","Order",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","updateOrdersResponse")
            kw["aname"] = "_updateOrdersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = []
                    return
            Holder.__name__ = "updateOrdersResponse_Holder"
            self.pyclass = Holder

    class RequestHeader_Dec(ElementDeclaration):
        literal = "RequestHeader"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","RequestHeader")
            kw["aname"] = "_RequestHeader"
            if ns0.SoapRequestHeader_Def not in ns0.RequestHeader_Dec.__bases__:
                bases = list(ns0.RequestHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapRequestHeader_Def)
                ns0.RequestHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapRequestHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestHeader_Dec_Holder"

    class ResponseHeader_Dec(ElementDeclaration):
        literal = "ResponseHeader"
        schema = "https://www.google.com/apis/ads/publisher/v201004"
        def __init__(self, **kw):
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201004","ResponseHeader")
            kw["aname"] = "_ResponseHeader"
            if ns0.SoapResponseHeader_Def not in ns0.ResponseHeader_Dec.__bases__:
                bases = list(ns0.ResponseHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapResponseHeader_Def)
                ns0.ResponseHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapResponseHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseHeader_Dec_Holder"

# end class ns0 (tns: https://www.google.com/apis/ads/publisher/v201004)
