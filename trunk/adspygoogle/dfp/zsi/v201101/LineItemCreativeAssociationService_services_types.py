################################################## 
# LineItemCreativeAssociationService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# https://www.google.com/apis/ads/publisher/v201101
##############################

class ns0:
    targetNamespace = "https://www.google.com/apis/ads/publisher/v201101"

    class ActivateLineItemCreativeAssociations_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "ActivateLineItemCreativeAssociations")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ActivateLineItemCreativeAssociations_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.LineItemCreativeAssociationAction_Def not in ns0.ActivateLineItemCreativeAssociations_Def.__bases__:
                bases = list(ns0.ActivateLineItemCreativeAssociations_Def.__bases__)
                bases.insert(0, ns0.LineItemCreativeAssociationAction_Def)
                ns0.ActivateLineItemCreativeAssociations_Def.__bases__ = tuple(bases)

            ns0.LineItemCreativeAssociationAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApiError_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "ApiError")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApiError_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"fieldPath"), aname="_fieldPath", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"trigger"), aname="_trigger", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"errorString"), aname="_errorString", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApiError.Type"), aname="_ApiError_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fieldPath = None
                    self._trigger = None
                    self._errorString = None
                    self._ApiError_Type = None
                    return
            Holder.__name__ = "ApiError_Holder"
            self.pyclass = Holder

    class ApiException_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "ApiException")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiException_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","ApiError",lazy=False)(pname=(ns,"errors"), aname="_errors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApplicationException_Def not in ns0.ApiException_Def.__bases__:
                bases = list(ns0.ApiException_Def.__bases__)
                bases.insert(0, ns0.ApplicationException_Def)
                ns0.ApiException_Def.__bases__ = tuple(bases)

            ns0.ApplicationException_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApiVersionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "ApiVersionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ApiVersionError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","ApiVersionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ApiVersionError_Def.__bases__:
                bases = list(ns0.ApiVersionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ApiVersionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApplicationException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "ApplicationException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ApplicationException_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApplicationException.Type"), aname="_ApplicationException_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    self._ApplicationException_Type = None
                    return
            Holder.__name__ = "ApplicationException_Holder"
            self.pyclass = Holder

    class AuthenticationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "AuthenticationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.AuthenticationError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","AuthenticationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.AuthenticationError_Def.__bases__:
                bases = list(ns0.AuthenticationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.AuthenticationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BooleanValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "BooleanValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.BooleanValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Value_Def not in ns0.BooleanValue_Def.__bases__:
                bases = list(ns0.BooleanValue_Def.__bases__)
                bases.insert(0, ns0.Value_Def)
                ns0.BooleanValue_Def.__bases__ = tuple(bases)

            ns0.Value_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CommonError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "CommonError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CommonError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","CommonError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.CommonError_Def.__bases__:
                bases = list(ns0.CommonError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.CommonError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CreativeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "CreativeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.CreativeError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","CreativeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.CreativeError_Def.__bases__:
                bases = list(ns0.CreativeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.CreativeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Date_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "Date")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Date_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"year"), aname="_year", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"month"), aname="_month", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"day"), aname="_day", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._year = None
                    self._month = None
                    self._day = None
                    return
            Holder.__name__ = "Date_Holder"
            self.pyclass = Holder

    class DateTime_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "DateTime")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.DateTime_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","Date",lazy=False)(pname=(ns,"date"), aname="_date", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"hour"), aname="_hour", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"minute"), aname="_minute", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"second"), aname="_second", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"timeZoneID"), aname="_timeZoneID", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._date = None
                    self._hour = None
                    self._minute = None
                    self._second = None
                    self._timeZoneID = None
                    return
            Holder.__name__ = "DateTime_Holder"
            self.pyclass = Holder

    class DeactivateLineItemCreativeAssociations_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "DeactivateLineItemCreativeAssociations")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.DeactivateLineItemCreativeAssociations_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.LineItemCreativeAssociationAction_Def not in ns0.DeactivateLineItemCreativeAssociations_Def.__bases__:
                bases = list(ns0.DeactivateLineItemCreativeAssociations_Def.__bases__)
                bases.insert(0, ns0.LineItemCreativeAssociationAction_Def)
                ns0.DeactivateLineItemCreativeAssociations_Def.__bases__ = tuple(bases)

            ns0.LineItemCreativeAssociationAction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InternalApiError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "InternalApiError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InternalApiError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","InternalApiError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InternalApiError_Def.__bases__:
                bases = list(ns0.InternalApiError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InternalApiError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InvalidUrlError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "InvalidUrlError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.InvalidUrlError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","InvalidUrlError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.InvalidUrlError_Def.__bases__:
                bases = list(ns0.InvalidUrlError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.InvalidUrlError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LineItemCreativeAssociationAction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "LineItemCreativeAssociationAction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LineItemCreativeAssociationAction_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"LineItemCreativeAssociationAction.Type"), aname="_LineItemCreativeAssociationAction_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LineItemCreativeAssociationAction_Type = None
                    return
            Holder.__name__ = "LineItemCreativeAssociationAction_Holder"
            self.pyclass = Holder

    class LineItemCreativeAssociation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "LineItemCreativeAssociation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LineItemCreativeAssociation_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"lineItemId"), aname="_lineItemId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"creativeId"), aname="_creativeId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"manualCreativeRotationWeight"), aname="_manualCreativeRotationWeight", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","DateTime",lazy=False)(pname=(ns,"startDateTime"), aname="_startDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","StartDateTimeType",lazy=False)(pname=(ns,"startDateTimeType"), aname="_startDateTimeType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","DateTime",lazy=False)(pname=(ns,"endDateTime"), aname="_endDateTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"destinationUrl"), aname="_destinationUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","Size",lazy=False)(pname=(ns,"sizes"), aname="_sizes", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation.Status",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociationStats",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lineItemId = None
                    self._creativeId = None
                    self._manualCreativeRotationWeight = None
                    self._startDateTime = None
                    self._startDateTimeType = None
                    self._endDateTime = None
                    self._destinationUrl = None
                    self._sizes = []
                    self._status = None
                    self._stats = None
                    return
            Holder.__name__ = "LineItemCreativeAssociation_Holder"
            self.pyclass = Holder

    class LineItemCreativeAssociationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "LineItemCreativeAssociationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LineItemCreativeAssociationError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.LineItemCreativeAssociationError_Def.__bases__:
                bases = list(ns0.LineItemCreativeAssociationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.LineItemCreativeAssociationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LineItemCreativeAssociationOperationError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "LineItemCreativeAssociationOperationError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.LineItemCreativeAssociationOperationError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociationOperationError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.LineItemCreativeAssociationOperationError_Def.__bases__:
                bases = list(ns0.LineItemCreativeAssociationOperationError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.LineItemCreativeAssociationOperationError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LineItemCreativeAssociationPage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "LineItemCreativeAssociationPage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LineItemCreativeAssociationPage_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"totalResultSetSize"), aname="_totalResultSetSize", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"startIndex"), aname="_startIndex", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation",lazy=False)(pname=(ns,"results"), aname="_results", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._totalResultSetSize = None
                    self._startIndex = None
                    self._results = []
                    return
            Holder.__name__ = "LineItemCreativeAssociationPage_Holder"
            self.pyclass = Holder

    class LineItemCreativeAssociationStats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "LineItemCreativeAssociationStats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.LineItemCreativeAssociationStats_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","Stats",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","Money",lazy=False)(pname=(ns,"costInOrderCurrency"), aname="_costInOrderCurrency", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._stats = None
                    self._costInOrderCurrency = None
                    return
            Holder.__name__ = "LineItemCreativeAssociationStats_Holder"
            self.pyclass = Holder

    class Money_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "Money")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Money_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"currencyCode"), aname="_currencyCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"microAmount"), aname="_microAmount", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._currencyCode = None
                    self._microAmount = None
                    return
            Holder.__name__ = "Money_Holder"
            self.pyclass = Holder

    class NotNullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "NotNullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NotNullError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","NotNullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NotNullError_Def.__bases__:
                bases = list(ns0.NotNullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NotNullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NullError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "NullError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NullError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","NullError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.NullError_Def.__bases__:
                bases = list(ns0.NullError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.NullError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NumberValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "NumberValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.NumberValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Value_Def not in ns0.NumberValue_Def.__bases__:
                bases = list(ns0.NumberValue_Def.__bases__)
                bases.insert(0, ns0.Value_Def)
                ns0.NumberValue_Def.__bases__ = tuple(bases)

            ns0.Value_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ParseError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "ParseError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ParseError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","ParseError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ParseError_Def.__bases__:
                bases = list(ns0.ParseError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ParseError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PermissionError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "PermissionError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.PermissionError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","PermissionError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.PermissionError_Def.__bases__:
                bases = list(ns0.PermissionError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.PermissionError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class QuotaError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "QuotaError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.QuotaError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","QuotaError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.QuotaError_Def.__bases__:
                bases = list(ns0.QuotaError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.QuotaError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "RequiredError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","RequiredError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredError_Def.__bases__:
                bases = list(ns0.RequiredError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredNumberError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "RequiredNumberError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredNumberError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","RequiredNumberError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredNumberError_Def.__bases__:
                bases = list(ns0.RequiredNumberError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredNumberError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RequiredSizeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "RequiredSizeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.RequiredSizeError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","RequiredSizeError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.RequiredSizeError_Def.__bases__:
                bases = list(ns0.RequiredSizeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.RequiredSizeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ServerError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "ServerError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.ServerError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","ServerError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.ServerError_Def.__bases__:
                bases = list(ns0.ServerError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.ServerError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Size_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "Size")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Size_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"width"), aname="_width", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"height"), aname="_height", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"isAspectRatio"), aname="_isAspectRatio", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    self._isAspectRatio = None
                    return
            Holder.__name__ = "Size_Holder"
            self.pyclass = Holder

    class SoapRequestHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "SoapRequestHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapRequestHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"authToken"), aname="_authToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"networkCode"), aname="_networkCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"applicationName"), aname="_applicationName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"oAuthToken"), aname="_oAuthToken", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authToken = None
                    self._networkCode = None
                    self._applicationName = None
                    self._oAuthToken = None
                    return
            Holder.__name__ = "SoapRequestHeader_Holder"
            self.pyclass = Holder

    class SoapResponseHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "SoapResponseHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SoapResponseHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requestId"), aname="_requestId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"responseTime"), aname="_responseTime", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requestId = None
                    self._responseTime = None
                    return
            Holder.__name__ = "SoapResponseHeader_Holder"
            self.pyclass = Holder

    class Statement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "Statement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Statement_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"query"), aname="_query", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","String_ValueMapEntry",lazy=False)(pname=(ns,"values"), aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._query = None
                    self._values = []
                    return
            Holder.__name__ = "Statement_Holder"
            self.pyclass = Holder

    class StatementError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "StatementError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.StatementError_Def.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","StatementError.Reason",lazy=False)(pname=(ns,"reason"), aname="_reason", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.StatementError_Def.__bases__:
                bases = list(ns0.StatementError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.StatementError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Stats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "Stats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Stats_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"impressionsDelivered"), aname="_impressionsDelivered", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clicksDelivered"), aname="_clicksDelivered", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._impressionsDelivered = None
                    self._clicksDelivered = None
                    return
            Holder.__name__ = "Stats_Holder"
            self.pyclass = Holder

    class String_ValueMapEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "String_ValueMapEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.String_ValueMapEntry_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"key"), aname="_key", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","Value",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "String_ValueMapEntry_Holder"
            self.pyclass = Holder

    class TextValue_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "TextValue")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TextValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.Value_Def not in ns0.TextValue_Def.__bases__:
                bases = list(ns0.TextValue_Def.__bases__)
                bases.insert(0, ns0.Value_Def)
                ns0.TextValue_Def.__bases__ = tuple(bases)

            ns0.Value_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TypeError_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "TypeError")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.TypeError_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.ApiError_Def not in ns0.TypeError_Def.__bases__:
                bases = list(ns0.TypeError_Def.__bases__)
                bases.insert(0, ns0.ApiError_Def)
                ns0.TypeError_Def.__bases__ = tuple(bases)

            ns0.ApiError_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UpdateResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "UpdateResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.UpdateResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"numChanges"), aname="_numChanges", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numChanges = None
                    return
            Holder.__name__ = "UpdateResult_Holder"
            self.pyclass = Holder

    class Value_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "Value")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Value_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Value.Type"), aname="_Value_Type", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Value_Type = None
                    return
            Holder.__name__ = "Value_Holder"
            self.pyclass = Holder

    class ApiVersionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "ApiVersionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthenticationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "AuthenticationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CommonError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "CommonError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CreativeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "CreativeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InternalApiError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "InternalApiError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InvalidUrlError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "InvalidUrlError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LineItemCreativeAssociation_Status_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "LineItemCreativeAssociation.Status")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LineItemCreativeAssociationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "LineItemCreativeAssociationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LineItemCreativeAssociationOperationError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "LineItemCreativeAssociationOperationError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NotNullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "NotNullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NullError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "NullError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ParseError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "ParseError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PermissionError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "PermissionError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QuotaError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "QuotaError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "RequiredError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredNumberError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "RequiredNumberError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequiredSizeError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "RequiredSizeError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ServerError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "ServerError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StartDateTimeType_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "StartDateTimeType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StatementError_Reason_Def(ZSI.TC.String, TypeDefinition):
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        type = (schema, "StatementError.Reason")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class createLineItemCreativeAssociation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createLineItemCreativeAssociation"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.createLineItemCreativeAssociation_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation",lazy=False)(pname=(ns,"lineItemCreativeAssociation"), aname="_lineItemCreativeAssociation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","createLineItemCreativeAssociation")
            kw["aname"] = "_createLineItemCreativeAssociation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lineItemCreativeAssociation = None
                    return
            Holder.__name__ = "createLineItemCreativeAssociation_Holder"
            self.pyclass = Holder

    class createLineItemCreativeAssociationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createLineItemCreativeAssociationResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.createLineItemCreativeAssociationResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","createLineItemCreativeAssociationResponse")
            kw["aname"] = "_createLineItemCreativeAssociationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "createLineItemCreativeAssociationResponse_Holder"
            self.pyclass = Holder

    class ApiExceptionFault_Dec(ElementDeclaration):
        literal = "ApiExceptionFault"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","ApiExceptionFault")
            kw["aname"] = "_ApiExceptionFault"
            if ns0.ApiException_Def not in ns0.ApiExceptionFault_Dec.__bases__:
                bases = list(ns0.ApiExceptionFault_Dec.__bases__)
                bases.insert(0, ns0.ApiException_Def)
                ns0.ApiExceptionFault_Dec.__bases__ = tuple(bases)

            ns0.ApiException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ApiExceptionFault_Dec_Holder"

    class createLineItemCreativeAssociations_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createLineItemCreativeAssociations"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.createLineItemCreativeAssociations_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation",lazy=False)(pname=(ns,"lineItemCreativeAssociations"), aname="_lineItemCreativeAssociations", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","createLineItemCreativeAssociations")
            kw["aname"] = "_createLineItemCreativeAssociations"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lineItemCreativeAssociations = []
                    return
            Holder.__name__ = "createLineItemCreativeAssociations_Holder"
            self.pyclass = Holder

    class createLineItemCreativeAssociationsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createLineItemCreativeAssociationsResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.createLineItemCreativeAssociationsResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","createLineItemCreativeAssociationsResponse")
            kw["aname"] = "_createLineItemCreativeAssociationsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = []
                    return
            Holder.__name__ = "createLineItemCreativeAssociationsResponse_Holder"
            self.pyclass = Holder

    class getLineItemCreativeAssociation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getLineItemCreativeAssociation"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.getLineItemCreativeAssociation_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"lineItemId"), aname="_lineItemId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"creativeId"), aname="_creativeId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","getLineItemCreativeAssociation")
            kw["aname"] = "_getLineItemCreativeAssociation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lineItemId = None
                    self._creativeId = None
                    return
            Holder.__name__ = "getLineItemCreativeAssociation_Holder"
            self.pyclass = Holder

    class getLineItemCreativeAssociationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getLineItemCreativeAssociationResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.getLineItemCreativeAssociationResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","getLineItemCreativeAssociationResponse")
            kw["aname"] = "_getLineItemCreativeAssociationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getLineItemCreativeAssociationResponse_Holder"
            self.pyclass = Holder

    class getLineItemCreativeAssociationsByStatement_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getLineItemCreativeAssociationsByStatement"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.getLineItemCreativeAssociationsByStatement_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","Statement",lazy=False)(pname=(ns,"filterStatement"), aname="_filterStatement", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","getLineItemCreativeAssociationsByStatement")
            kw["aname"] = "_getLineItemCreativeAssociationsByStatement"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filterStatement = None
                    return
            Holder.__name__ = "getLineItemCreativeAssociationsByStatement_Holder"
            self.pyclass = Holder

    class getLineItemCreativeAssociationsByStatementResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getLineItemCreativeAssociationsByStatementResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.getLineItemCreativeAssociationsByStatementResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociationPage",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","getLineItemCreativeAssociationsByStatementResponse")
            kw["aname"] = "_getLineItemCreativeAssociationsByStatementResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "getLineItemCreativeAssociationsByStatementResponse_Holder"
            self.pyclass = Holder

    class performLineItemCreativeAssociationAction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "performLineItemCreativeAssociationAction"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.performLineItemCreativeAssociationAction_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociationAction",lazy=False)(pname=(ns,"lineItemCreativeAssociationAction"), aname="_lineItemCreativeAssociationAction", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("https://www.google.com/apis/ads/publisher/v201101","Statement",lazy=False)(pname=(ns,"filterStatement"), aname="_filterStatement", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","performLineItemCreativeAssociationAction")
            kw["aname"] = "_performLineItemCreativeAssociationAction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lineItemCreativeAssociationAction = None
                    self._filterStatement = None
                    return
            Holder.__name__ = "performLineItemCreativeAssociationAction_Holder"
            self.pyclass = Holder

    class performLineItemCreativeAssociationActionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "performLineItemCreativeAssociationActionResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.performLineItemCreativeAssociationActionResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","UpdateResult",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","performLineItemCreativeAssociationActionResponse")
            kw["aname"] = "_performLineItemCreativeAssociationActionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "performLineItemCreativeAssociationActionResponse_Holder"
            self.pyclass = Holder

    class updateLineItemCreativeAssociation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateLineItemCreativeAssociation"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.updateLineItemCreativeAssociation_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation",lazy=False)(pname=(ns,"lineItemCreativeAssociation"), aname="_lineItemCreativeAssociation", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","updateLineItemCreativeAssociation")
            kw["aname"] = "_updateLineItemCreativeAssociation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lineItemCreativeAssociation = None
                    return
            Holder.__name__ = "updateLineItemCreativeAssociation_Holder"
            self.pyclass = Holder

    class updateLineItemCreativeAssociationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateLineItemCreativeAssociationResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.updateLineItemCreativeAssociationResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","updateLineItemCreativeAssociationResponse")
            kw["aname"] = "_updateLineItemCreativeAssociationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = None
                    return
            Holder.__name__ = "updateLineItemCreativeAssociationResponse_Holder"
            self.pyclass = Holder

    class updateLineItemCreativeAssociations_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateLineItemCreativeAssociations"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.updateLineItemCreativeAssociations_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation",lazy=False)(pname=(ns,"lineItemCreativeAssociations"), aname="_lineItemCreativeAssociations", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","updateLineItemCreativeAssociations")
            kw["aname"] = "_updateLineItemCreativeAssociations"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lineItemCreativeAssociations = []
                    return
            Holder.__name__ = "updateLineItemCreativeAssociations_Holder"
            self.pyclass = Holder

    class updateLineItemCreativeAssociationsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateLineItemCreativeAssociationsResponse"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            ns = ns0.updateLineItemCreativeAssociationsResponse_Dec.schema
            TClist = [GTD("https://www.google.com/apis/ads/publisher/v201101","LineItemCreativeAssociation",lazy=False)(pname=(ns,"rval"), aname="_rval", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","updateLineItemCreativeAssociationsResponse")
            kw["aname"] = "_updateLineItemCreativeAssociationsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rval = []
                    return
            Holder.__name__ = "updateLineItemCreativeAssociationsResponse_Holder"
            self.pyclass = Holder

    class RequestHeader_Dec(ElementDeclaration):
        literal = "RequestHeader"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","RequestHeader")
            kw["aname"] = "_RequestHeader"
            if ns0.SoapRequestHeader_Def not in ns0.RequestHeader_Dec.__bases__:
                bases = list(ns0.RequestHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapRequestHeader_Def)
                ns0.RequestHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapRequestHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "RequestHeader_Dec_Holder"

    class ResponseHeader_Dec(ElementDeclaration):
        literal = "ResponseHeader"
        schema = "https://www.google.com/apis/ads/publisher/v201101"
        def __init__(self, **kw):
            kw["pname"] = ("https://www.google.com/apis/ads/publisher/v201101","ResponseHeader")
            kw["aname"] = "_ResponseHeader"
            if ns0.SoapResponseHeader_Def not in ns0.ResponseHeader_Dec.__bases__:
                bases = list(ns0.ResponseHeader_Dec.__bases__)
                bases.insert(0, ns0.SoapResponseHeader_Def)
                ns0.ResponseHeader_Dec.__bases__ = tuple(bases)

            ns0.SoapResponseHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResponseHeader_Dec_Holder"

# end class ns0 (tns: https://www.google.com/apis/ads/publisher/v201101)
